Skynet 项目完整模块分析

  根据架构分析，整个项目可按以下层次和模块划分来完全理解：

一、C核心层（Runtime Engine）

1. 启动与调度模块
  skynet_main.c    - 主入口，配置加载
  skynet_start.c   - 线程创建与管理
  ├── 网络线程 (thread_socket)
  ├── 定时器线程 (thread_timer)
  ├── 监控线程 (thread_monitor)
  └── 工作线程池 (thread_worker)

2. 服务管理模块
  skynet_server.c  - 服务上下文管理（创建/销毁/消息分发）
  skynet_handle.c  - 服务句柄分配（ID管理/名字注册）
  skynet_module.c  - 动态模块加载（.so加载/符号查找）

3. 消息系统模块
  skynet_mq.c      - 二级消息队列
  ├── 全局队列（global_queue）
  └── 服务队列（message_queue）
  skynet_harbor.c  - 跨节点消息（分布式支持）

4. 网络I/O模块
  socket_server.c  - 底层socket实现（epoll/kqueue）
  skynet_socket.c  - 网络消息封装（事件→消息转换）
  ├── SOCKET_DATA
  ├── SOCKET_CLOSE
  ├── SOCKET_ACCEPT
  └── SOCKET_ERROR

5. 系统支持模块
  skynet_timer.c   - 分层时间轮定时器
  skynet_monitor.c - 服务监控（死锁检测）
  skynet_env.c     - 环境变量管理
  skynet_log.c     - 日志系统
  skynet_error.c   - 错误处理
  skynet_daemon.c  - 守护进程
  malloc_hook.c    - 内存钩子（jemalloc集成）

二、C-Lua桥接层（Bridge Layer）

1. C服务模块 (service-src/)
  service_snlua.c   - Lua容器服务（最重要）
  service_gate.c    - 网关服务（连接管理）
  service_harbor.c  - Harbor服务（节点通信）
  service_logger.c  - 日志服务

2. Lua C扩展 (lualib-src/)
  lua-skynet.c      - 核心skynet API绑定
  lua-socket.c      - socket API
  lua-seri.c        - 序列化
  lua-netpack.c     - 网络包处理
  lua-memory.c      - 内存查询
  lua-cluster.c     - 集群支持
  lua-crypt.c       - 加密库
  lua-sharedata.c   - 共享数据
  lua-mongo.c       - MongoDB驱动
  lua-bson.c        - BSON编解码

三、Lua框架层（Framework Layer）

1. 核心框架 (lualib/)
  skynet.lua        - 核心API（send/call/start等）
  ├── 协程管理
  ├── 消息分发
  ├── Session管理
  └── 错误处理

2. 服务管理
  skynet/manager.lua    - 服务管理（launch/kill/register）
  skynet/service.lua    - 服务包装器
  skynet/queue.lua      - 消息队列（串行化）

3. 网络通信
  skynet/socket.lua         - Socket高级封装
  skynet/socketchannel.lua  - TCP通道管理
  skynet/dns.lua           - DNS解析
  http/httpc.lua           - HTTP客户端
  http/httpd.lua           - HTTP服务器

4. 分布式支持
  skynet/cluster.lua    - 集群管理
  skynet/harbor.lua     - Harbor通信
  skynet/multicast.lua  - 组播

5. 数据管理
  skynet/sharedata.lua  - 只读共享数据
  skynet/sharetable.lua - 共享表
  skynet/datacenter.lua - 数据中心
  skynet/datasheet/     - 数据表

6. 调试工具
  skynet/debug.lua      - 调试接口
  skynet/inject.lua     - 代码注入
  skynet/remotedebug.lua - 远程调试

7. 框架扩展
  snax/             - Snax框架（简化actor模式）
  ├── gateserver.lua   - 网关服务模板
  ├── loginserver.lua  - 登录服务模板
  └── msgserver.lua    - 消息服务模板

四、系统服务层（System Services）

1. 核心服务 (service/)
  bootstrap.lua     - 系统引导
  launcher.lua      - 服务启动器
  service_mgr.lua   - 服务管理器

2. 网络服务
  gate.lua          - 网关服务实现

3. 分布式服务
  clusterd.lua      - 集群守护
  clusteragent.lua  - 集群代理
  clusterproxy.lua  - 集群代理
  cmaster.lua       - 主节点
  cslave.lua        - 从节点

4. 数据服务
  datacenterd.lua   - 数据中心守护
  sharedatad.lua    - 共享数据守护

5. 调试服务
  console.lua       - 控制台
  debug_console.lua - 调试控制台
  debug_agent.lua   - 调试代理

五、模块依赖关系

  应用层
    ↓
  [Lua Services] → [Lua Framework]
                        ↓
                [C-Lua Bridge]
                        ↓
              [C Runtime Core]
                        ↓
                [OS (Linux/Mac)]

六、学习路径建议

基础理解（必须掌握）
  1. skynet_main.c → 入口
  2. skynet_server.c → 服务模型
  3. skynet_mq.c → 消息队列
  4. service_snlua.c → Lua容器
  5. skynet.lua → Lua核心API

进阶理解（深入原理）
  1. socket_server.c → 网络实现
  2. skynet_timer.c → 定时器实现
  3. skynet_harbor.c → 分布式
  4. 协程调度机制
  5. 内存管理策略

实践应用（项目开发）
  1. gate.lua → 网关开发
  2. snax/ → 框架使用
  3. 集群配置与部署
  4. 性能调优
  5. 热更新机制

七、关键设计模式
  1. Actor模式：每个服务独立运行
  2. 消息驱动：异步消息通信
  3. 协程并发：同步风格异步编程
  4. 二级队列：负载均衡调度
  5. 时间轮：高效定时器
  6. 服务化：功能模块化

通过理解这些模块和它们之间的关系，可以完整掌握Skynet框架的设计和实现。每个模块都有明确的职责边界，相互配合构成了一个高性能的游戏服务器框架。